classDiagram
    class Note {
        +int Number
        +string Name
        +string Content
        +User Client
        +Skill Skill
        +List~Note~ Notes
        +string ToString()
        +static Note FromString(string input)
    }

    class User {
        +string Name
        +string Email
        +string Password
        +bool IsAdmin
        +List~Users~ Users
        +string ToString()
        +static User FromString(string input)
    }

    class Module {
        +int Number
        +string Name
        +string Description
        +List~Module~ Modules
        +string ToString()
        +static Module FromString(string input)
    }

    class Skill {
        +int Number
        +string Name
        +string Description
        +Level Level
        +Module Module
        +string EmotionMatch
        +List~Skill~ Skills
        +string ToString()
        +static Skill FromString(string input)
    }

    class INoteRepository {
        <<interface>>
        +IEnumerable~Note~ GetAll()
        +Note GetNote(int number)
        +void Add(Note note)
        +void Update(Note note)
        +void Delete(Note note)
    }

    class IUserRepository {
        <<interface>>
        +IEnumerable~User~ GetAll()
        +User GetUser(string email)
        +void AddUser(User user)
        +void UpdateUser(User user)
        +void DeleteUser(User user)
        +bool ValidateUserLogin(string email, string password)
    }

    class IModuleRepository {
        <<interface>>
        +IEnumerable~Module~ GetAll()
        +Module GetModule(int number)
        +void AddModule(Module module)
        +void UpdateModule(Module module)
        +void DeleteModule(Module module)
        -void RewriteFile(List~Module~ modules)
    }

    class ISkillRepository {
        <<interface>>
        +IEnumerable~Skill~ GetAll()
        +Skill GetSkill(int number)
        +void AddSkill(Skill skill)
        +void UpdateSkill(Skill skill)
        +void DeleteSkill(Skill skill)
        -void RewriteFile(List~Skill~ skills)
    }

    class FileNoteRepository {
        -string _noteFilePath
        +FileNoteRepository(string filePath)
        +IEnumerable~Note~ GetAll()
        +Note GetNote(int number)
        +void Add(Note note)
        +void Update(Note note)
        +void Delete(Note note)
    }

    class FileUserRepository {
        -string _userFilePath
        +FileUserRepository(string filePath)
        +IEnumerable~User~ GetAll()
        +User GetUser(string email)
        +void AddUser(User user)
        +void UpdateUser(User user)
        +void DeleteUser(User user)
        +bool ValidateUserLogin(string email, string password)
    }

    class FileModuleRepository {
        -string _moduleFilePath
        +FileModuleRepository(string filePath)
        +IEnumerable~Module~ GetAll()
        +Module GetModule(int number)
        +void AddModule(Module module)
        +void UpdateModule(Module module)
        +void DeleteModule(Module module)
        -void RewriteFile(List~Module~ modules)
    }

    class FileSkillRepository {
        -string _skillFilePath
        +FileSkillRepository(string filePath)
        +IEnumerable~Skill~ GetAll()
        +Skill GetSkill(int number)
        +void AddSkill(Skill skill)
        +void UpdateSkill(Skill skill)
        +void DeleteSkill(Skill skill)
        -void RewriteFile(List~Skill~ skills)
    }

    class Level {
        <<enumeration>>
        None = 0
        Low = 1
        Medium = 2
        High = 3
    }

    Note --> User : Client
    Note --> Skill : Skill
    FileNoteRepository ..|> INoteRepository
    FileNoteRepository --> Note

    FileUserRepository ..|> IUserRepository
    FileUserRepository --> User

    FileModuleRepository ..|> IModuleRepository
    FileModuleRepository --> Module

    FileSkillRepository ..|> ISkillRepository
    FileSkillRepository --> Skill
    Skill --> Module
    Skill --> Level


        private string _number
        private Skill _skill
        private string _emotion
        private Model.Classes.Match _selectedMatch
        private string _searchTerm = string.Empty
        private Skill _selectedSkill;
        private string _selectedEmotion;
        private string _selectedLevel;